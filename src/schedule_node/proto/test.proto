// Copyright 2017 The Cartographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package zhihui.test.proto;

import "google/protobuf/empty.proto";

message Metadata {
    int64 timestamp = 1;
    string client_id = 2;
}

message LoginRequest {
    Metadata metadata = 1;
    string log_information = 2;
}

message LoginResponse {
    Metadata metadata = 1;
    bool is_logged = 2;
    string check_information = 3;
}

message FibonacciRequest {
    Metadata metadata = 1;
    int64 order = 2;
}

message FibonacciSequence {
    repeated int64 num = 1;
}

message FibonacciResponse {
    Metadata metadata = 1;
    bool is_done = 2;
    oneof result {
        int64 next_one = 3;
        FibonacciSequence sequence = 4;
    }
}

message SumRequest {
    Metadata metadata = 1;
    int64 order = 2;
}

message SumResponse {
    Metadata metadata = 1;
    int64 result = 2;
}

message BroadcastMessage {
    string topic = 1;
    string message = 2;
}

message testMessage {
    int64 timestamp = 1;
    int32 index = 2;
}

// information about the gRPC server.
service Schedule {
    // clients register at the server
    rpc Login (LoginRequest) returns (LoginResponse);

    rpc Broadcast (BroadcastMessage) returns (google.protobuf.Empty);

    // clients wait for fibonacci sequence from the server
    rpc CalculateFibonacci (FibonacciRequest) returns (stream FibonacciResponse);

    // server sum up all the numbers for the client
    rpc SumNumbers (stream SumRequest) returns (SumResponse);

    // a test in which the client and the server exchange and increment the index
    rpc BidirectionalTest (stream testMessage) returns (stream testMessage);
}
